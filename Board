package monopl;

import java.awt.event.*;
import java.awt.*;

@SuppressWarnings("serial")
public class board extends Component {
	private int Width  = 900;
	private int Height = 570;
	private manager propertymanager;
	private player Player1;
	private player Player2;
	static final Frame quit = new Frame("Quit?");
	static final Frame pr = new Frame("Properties");
	static final Choice choice = new Choice();
	static final Choice p2 = new Choice();	
	//static final Frame trade = new Frame("Trade Your Properties");
	public boolean turn   = true;
	// if rolled == true, the player has already rolled.
	public boolean rolled = false;
	// the numbers on the dice
	private int Dice1 = 0;
	private int Dice2 = 0;
	// The frame that pops up when you must sell houses because you are in debt
	final Frame frame = new Frame( "Must sell" );
	// The 'remove houses' frame
	final Frame fr = new Frame( "Remove Houses" );
	// if noMoney == true, the player whose turn it is is in debt.
	private boolean noMoney = false;	
////////////////////////////////////////////////////////////////////////////////////
	public board( String one, String two ) {
		//create the two players with the specified names
		Player1 = new player( one, 1 );
		Player2 = new player( two, 2 );
		//create the property  with the two players
		propertymanager = new manager( Player1, Player2 );
		//enable events for the board
		enableEvents( AWTEvent.MOUSE_EVENT_MASK );
		enableEvents( AWTEvent.KEY_EVENT_MASK );
		repaint();
	}
	 
	public void paint( Graphics g ) {
		//Draw the board
		 
		g.setColor( new Color( (100), (100), (0) ) );//back green rect
		g.fillRect( 1, 1, 800, 650 );
		 
		g.setColor( Color.CYAN );//back white rect
		g.fill3DRect( 5, 5, 488, 488, true );
		g.setColor( new Color( (100), (30), (50) ) ); //green color
		g.fill3DRect( 100, 100, 300, 300, true ); //box in the middle
 	    g.fill3DRect( 80, 300, 20, 33, true );				 
	    g.fill3DRect( 80, 366, 20, 33, true );				 
		g.fill3DRect( 80, 100, 20, 33, true );				  
		g.fill3DRect( 80, 133, 20, 33, true );				 
		g.fill3DRect( 80, 200, 20, 33, true );				 
		g.fill3DRect( 100, 80, 33, 20, true );				 
		g.fill3DRect( 166, 80, 33, 20, true );				  
		g.fill3DRect( 200, 80, 33, 20, true );				 
		g.fill3DRect( 266, 80, 33, 20, true );				 
		g.fill3DRect( 333, 80, 33, 20, true );				 
		g.fill3DRect( 366, 80, 33, 20, true );				 
		g.fill3DRect( 400, 100, 20, 33, true );				 
		g.fill3DRect( 400, 166, 20, 33, true );				 
		g.fill3DRect( 400, 200, 20, 33, true );				 
		g.fill3DRect( 400, 266, 20, 33, true );				 	
		g.fill3DRect( 400, 300, 20, 33, true );				 	
		g.fill3DRect( 400, 366, 20, 33, true );				 		
		g.fill3DRect( 366, 400, 33, 20, true );				 
		g.fill3DRect( 333, 400, 33, 20, true );				 
		g.fill3DRect( 266, 400, 33, 20, true );				 
		g.fill3DRect( 100, 400, 33, 20, true );				 
		g.fill3DRect( 133, 400, 33, 20, true );
		g.fill3DRect( 166, 400, 33, 20, true );				 
		g.fill3DRect( 30, 30, 70, 70, true );				 
		g.fill3DRect( 80, 166, 20, 33, true );				 
		g.fill3DRect( 400, 133, 20, 33, true );				 
		g.fill3DRect( 200, 400, 33, 20, true );				 
		g.fill3DRect( 300, 80, 33, 20, true );				 
		g.fill3DRect( 80, 333, 20, 33, true );				 
		g.fill3DRect( 300, 400, 33, 20, true );				 
		g.fill3DRect( 80, 233, 20, 33, true );				 
		g.fill3DRect( 80, 266, 20, 33, true );	
		g.fill3DRect( 233, 80, 33, 20, true );				 
		g.fill3DRect( 400, 233, 20, 33, true );				 
		g.fill3DRect( 233, 400, 33, 20, true );				 
		g.fill3DRect( 133, 80, 33, 20, true );				 
		g.fill3DRect( 400, 333, 20, 33, true );				 
		
		g.fill3DRect( 7,  400, 93, 93, true );	
		//Go
		g.fill3DRect( 400, 400, 93, 93, true );				 
		g.fill3DRect( 400, 7, 93, 93, true );				 
		g.setColor( Color.black );
		String fp =  "$" + propertymanager.Properties[20][1];
		g.setFont( new Font( "Courier", Font.BOLD, 15 ) );
	 	// Draw how much money is in the middle
		g.drawString( fp, 412 , 90 );
		//Draw the words for the properties
		g.setColor( Color.black );
		g.setFont( new Font( "Courier", Font.BOLD, 30 ) );
		g.drawString( "GO",30, 460 );						//Go
		
		g.setFont( new Font( "Courier", Font.BOLD, 20 ) );
		g.drawString( "Go to", 416, 435 );					//Go to Prison
		g.drawString( "Prison", 416, 465 );
		 //Free parking
		g.drawString( "Park", 407, 40);
		g.drawString( "Prison", 30, 73 );						//Prison
		g.setFont( new Font( "arial",Font.BOLD, 8 ) );
		//Draw the outlines of each property
		g.drawLine( 7, 100, 79, 100 );
		g.drawLine( 7, 133, 79, 133 );
		g.drawLine( 7, 166, 79, 166 ); 
		g.drawLine( 7, 200, 79, 200 ); 
		g.drawLine( 7, 233, 79, 233 ); 
		g.drawLine( 7, 266, 79, 266 ); 
		g.drawLine( 7, 300, 79, 300 ); 
		g.drawLine( 7, 333, 79, 333 ); 
		g.drawLine( 7, 366, 79, 366 ); 
		g.drawLine( 7, 400, 79, 400 ); 
		g.drawLine( 421, 100, 490, 100 );
		g.drawLine( 421, 133, 490, 133 );
		g.drawLine( 421, 166, 490, 166 );
		g.drawLine( 421, 200, 490, 200 );
		g.drawLine( 421, 233, 490, 233 );
		g.drawLine( 421, 266, 490, 266 );
		g.drawLine( 421, 300, 490, 300 );
		g.drawLine( 421, 333, 490, 333 );
		g.drawLine( 421, 366, 490, 366 );
		g.drawLine( 421, 400, 490, 400 );
		g.drawLine( 100, 79, 100, 7 );
		g.drawLine( 133, 79, 133, 7 );
		g.drawLine( 166, 79, 166, 7 );
		g.drawLine( 200, 79, 200, 7 );
		g.drawLine( 233, 79, 233, 7 );
		g.drawLine( 266, 79, 266, 7 );
		g.drawLine( 300, 79, 300, 7 );
		g.drawLine( 333, 79, 333, 7 );
		g.drawLine( 366, 79, 366, 7 );
		g.drawLine( 400, 79, 400, 7 );
		g.drawLine( 100, 421, 100, 490 );
		g.drawLine( 133, 421, 133, 490 );
		g.drawLine( 166, 421, 166, 490 );
		g.drawLine( 200, 421, 200, 490 );
		g.drawLine( 233, 421, 233, 490 );
		g.drawLine( 266, 421, 266, 490 );
		g.drawLine( 300, 421, 300, 490 );
		g.drawLine( 333, 421, 333, 490 );
		g.drawLine( 366, 421, 366, 490 );
		g.drawLine( 400, 421, 400, 490 );

		//the array of positions for the location of where to draw the houses
		int places[][] = {	{-1,-1},{85,378},{-1,345},{85,312},{-1,-1},{85,245},{85,212},
						{-1,-1},{85,145},{85,112},{-1,-1},{112,85},{145,85},{178,85},
						{212,85},{245,85},{278,85},{-1,-1},{345,85},{378,85},{-1,-1},
						{405,112},{-1,-1},{405,178},{405,212},{405,245},{405,278},
						{405,312},{405,345},{405,378},{-1,-1},{378,405},{345,405},
						{-1,-1},{278,405},{245,405},{-1,-1},{178,405},{145,-1},
						{112,405}};
		
		//Draw how many houses are on each owned property
		for( int i=0;  i<40;  i++ ) {
			if( propertymanager.Properties[i][0] == 1 ) {
				g.setColor( Color.BLACK);
				g.fill3DRect(places[i][0],places[i][1],10,10,true );
				g.setColor( Color.white );
				g.setFont( new Font( "Verdana", Font.PLAIN, 8 ) );
				if(  propertymanager.Properties[i][1] != -1 )
					g.drawString( propertymanager.Properties[i][1]+"",places[i][0]+3,places[i][1]+8 );
			}
			else if( propertymanager.Properties[i][0] == 2 ) {
				g.setColor( Color.red );
				g.fill3DRect(places[i][0],places[i][1],10,10,true );
				g.setColor( Color.white );
				g.setFont( new Font( "Verdana", Font.PLAIN, 8 ) );
				if(  propertymanager.Properties[i][1] != -1 )
					g.drawString( propertymanager.Properties[i][1]+"",places[i][0]+3,places[i][1]+8 );
			}
		}

		//Draw the dice
		g.setColor( new Color( (230), (230), (230) ) );
		g.setFont( new Font( "verdana", Font.BOLD, 20 ) );
	//	g.fillRoundRect( 120, 150, 33, 33 ,5,5);
		g.fillRoundRect( 200, 200, 33, 33 ,5,5);//dice left
		//g.fillRoundRect( 161, 150, 33, 33,5,5);
		
		g.fillRoundRect( 250, 200, 33, 33,5,5);//dice right
		
		g.setColor( Color.ORANGE );
		//Dice 1
		if (Dice1 ==1){
			g.fill3DRect(210,215,6,6,true);
		}
		else if (Dice1 == 2){
			 
			g.fill3DRect(205,215,6,6,true);
			g.fill3DRect(225,215,6,6,true);
		
		
		}
		else if (Dice1 == 3){
			g.fill3DRect(205,205,6,6,true);
			g.fill3DRect(215,215,6,6,true);
			g.fill3DRect(225,225,6,6,true);
		}
		else if (Dice1 == 4){
			g.fill3DRect(205,205,6,6,true);
			g.fill3DRect(205,220,6,6,true);
			g.fill3DRect(220,205,6,6,true);
			g.fill3DRect(220,220,6,6,true);
		}
		else if (Dice1 == 5){
			g.fill3DRect(205,205,6,6,true);
			g.fill3DRect(205,220,6,6,true);
			g.fill3DRect(220,205,6,6,true);
			g.fill3DRect(220,220,6,6,true);
			g.fill3DRect(212,215,6,6,true);
		}
		else if (Dice1 == 6) {
			g.fill3DRect(205,205,6,6,true);
			g.fill3DRect(205,215,6,6,true);
			g.fill3DRect(205,225,6,6,true);
			g.fill3DRect(220,205,6,6,true);
			g.fill3DRect(220,215,6,6,true);
			g.fill3DRect(220,225,6,6,true);
		}
		//Dice 2
		g.setColor(Color.ORANGE );
		if (Dice2 ==1){
			g.fill3DRect(261,215,6,6,true);
		}
		else if (Dice2 == 2){
			g.fill3DRect(254,215,6,6,true);
			g.fill3DRect(264,215,6,6,true);
		}
		else if (Dice2 == 3){
			g.fill3DRect(254,205,6,6,true);
			g.fill3DRect(264,215,6,6,true);
			g.fill3DRect(274,225,6,6,true);
		}
		else if (Dice2 == 4){
			g.fill3DRect(254,205,6,6,true);
			g.fill3DRect(254,220,6,6,true);
			g.fill3DRect(264,205,6,6,true);
			g.fill3DRect(264,220,6,6,true);
		}
		else if (Dice2 == 5){
			g.fill3DRect(254,205,6,6,true);
			g.fill3DRect(254,220,6,6,true);
			g.fill3DRect(269,205,6,6,true);
			g.fill3DRect(269,220,6,6,true);
			g.fill3DRect(261,215,6,6,true);
		}
		else if (Dice2 == 6) {
			g.fill3DRect(254,205,6,6,true);
			g.fill3DRect(254,215,6,6,true);
			g.fill3DRect(254,225,6,6,true);
			g.fill3DRect(269,205,6,6,true);
			g.fill3DRect(269,215,6,6,true);
			g.fill3DRect(269,225,6,6,true);
		}
		 
		//Draw the property stats for the property just landed on by the player
		if( turn ) {
			
			//propertymanager.DrawPropertyStats( Player1.Position, 110, 207, g );
		     propertymanager.DrawPropertyStats( Player1.Position, 500, 95, g );
			g.setColor( Color.YELLOW);
			g.setFont( new Font( "Courier", Font.BOLD, 18 ) );
			g.drawString( "Turn = " + Player1.Name, 500, 320  );

			if( !rolled )
				g.drawString( "Roll", 500, 350 );
		}
		else { // for player 2
		 

				propertymanager.DrawPropertyStats( Player2.Position, 500, 95, g );
			g.setColor( Color.RED);
			g.setFont( new Font( "Courier", Font.BOLD, 18 ) );
			g.drawString( "Turn = " + Player2.Name, 500, 320 );
			if( !rolled )
				g.drawString( "Roll", 500, 350 );
		}
		
		
		//Draw the players

		Player1.DrawPlayer( g );
		
		Player2.DrawPlayer( g );
		
		//is the player out of money?  if so, draw the frame telling them they
		//must sell property
		if( (Player1.Money < 0 || Player2.Money < 0) && !frame.isShowing() ) {
			frame.setBackground( Color.black );
			frame.setSize( 400, 110 );
			Label lab = new Label( "You must sell property or houses to pay your debt." );
			frame.add( lab );
			frame.setVisible( true );
			frame.addWindowListener( new WindowAdapter() {
				public void windowClosing( WindowEvent e ) {
					frame.setVisible( false );
				}
			});
			noMoney = true;
			Rem();
		}

	}
	
	 
	
	//The usual component methods
	public boolean contains( int x, int y ) {
		if( x>0  &&  x<Width  &&  y>0  &&  y<Height ) 
			return true;
		return false;
	}
	public Dimension getPreferredSize() {
		return new Dimension( Width, Height );
	}
	public Dimension getMinimumSize() {
		return new Dimension( Width, Height );
	}
	

//getting out of Prison...
	public void pay50() {
			if( turn && Player1.inPrison ) {
						Player1.Money -= 50;
						System.out.println( Player1.Name +" paid $50 and go to Prison" );
						propertymanager.Properties[20][1] += 50;
						Player1.inPrison = false;
					}
					else if( !turn && Player2.inPrison ) {
						Player2.Money -= 50;
						System.out.println( Player2.Name +" paid $50 and go to Prison" );
						propertymanager.Properties[20][1] += 50;
						Player2.inPrison = false;
					}
					repaint();
				}
				

	//credits

		
	//quiting the program;
	public void quit() {
	final Frame quit = new Frame();
		final Label question = new Label("End game?" );
		final Button yes = new Button("Yes" );
		final Button no = new Button( "NO" );
		quit.setSize( 400, 90 );
		quit.setBackground( Color.MAGENTA );
		quit.setLayout( new FlowLayout(FlowLayout.CENTER) );
		quit.add( question);
		quit.add( yes );
		quit.add( no );
		quit.setVisible( true );
		no.addActionListener( new ActionListener() {
			public void actionPerformed( ActionEvent e ) {
				quit.setVisible(false);
				}
				
		});
		yes.addActionListener ( new ActionListener() {
		    public void actionPerformed ( ActionEvent e) {
			//System.out.println("quit");
			quit.setVisible(false);
			monoboard.mainF.setVisible(false);//System.exit(0);
			}
			});
		quit.addWindowListener( new WindowAdapter() {
			public void windowClosing( WindowEvent e ) {
				quit.setVisible( false );
				repaint();
			}
		});
		repaint();
	}
	//either the 'roll' button was clicked or 'r' was pressed.
	public void Roll() {
		boolean snakeEyes = false;
		Dice1 = ( int )( Math.random() * 6 + 1 );
		Dice2 = ( int )( Math.random() * 6 + 1 );
		if( Dice1 == Dice2 ) {
			snakeEyes = true;
			rolled = false;
		}
		else
			rolled = true;
		if( turn ) {
			Player1.Move( Dice1 + Dice2, snakeEyes, propertymanager );
			String a1 = propertymanager.CheckProperty( Player1.PlayerNum, Player1.Position );
		}
		else {
			Player2.Move( Dice1 + Dice2, snakeEyes, propertymanager );
			String a2 = propertymanager.CheckProperty( Player2.PlayerNum, Player2.Position );
		}
		repaint();
	}
	//either the 'buy' button was clicked or the 'b' button was typed
	public void Buy() {
		// if they have enough money, sell it and set it as being owned
		if (propertymanager.Properties[Player1.Position][0] == 2)// 
		       	propertymanager.Properties[Player1.Position][0] = 2;
		else if (propertymanager.Properties[Player2.Position][0] == 1)
		    	propertymanager.Properties[Player1.Position][0] = 1;

		    
		else if( turn && Player1.Money>=propertymanager.Properties[Player1.Position][8] &&
		propertymanager.Properties[Player1.Position][0] != -1 &&
		propertymanager.Properties[Player1.Position][0] != 1      ) {
			propertymanager.Properties[Player1.Position][0] = 1;
			Player1.Money -= propertymanager.Properties[Player1.Position][8];
System.out.println( Player1.Name + " paid $" + propertymanager.Properties[Player1.Position][8] + " for "+ propertymanager.List[Player1.Position] );
			if( Player1.Position == 5 || Player1.Position == 15 || Player1.Position == 25 || Player1.Position == 35 ) {
				int count = 0;
				//fix the railroad price according to the number owned
				if( propertymanager.Properties[5][0] == 1 ) count++;
				if( propertymanager.Properties[15][0] == 1 ) count++;
				if( propertymanager.Properties[25][0] == 1 ) count++;
				if( propertymanager.Properties[35][0] == 1 ) count++;
				if( count == 1 ) count = 25;
				else if( count == 2 ) count = 50;
				else if( count == 3 ) count = 100;
				else if( count == 4 ) count = 200;
				if( propertymanager.Properties[5][0] == 1 ) propertymanager.Properties[5][2] = count;
				if( propertymanager.Properties[15][0] == 1 ) propertymanager.Properties[15][2] = count;
				if( propertymanager.Properties[25][0] == 1 ) propertymanager.Properties[25][2] = count;
				if( propertymanager.Properties[35][0] == 1 ) propertymanager.Properties[35][2] = count;
			}
		}//do the same for player 2
		
		else if( !turn && Player2.Money>=propertymanager.Properties[Player2.Position][8] &&
		propertymanager.Properties[Player2.Position][0] != -1 &&
		propertymanager.Properties[Player2.Position][0] != 2      ) {
			propertymanager.Properties[Player2.Position][0] = 2;
			Player2.Money -= propertymanager.Properties[Player2.Position][8];
System.out.println( Player2.Name + " paid $" + propertymanager.Properties[Player2.Position][8] + " for "+ propertymanager.List[Player2.Position] );
			if( Player2.Position == 5 || Player2.Position == 15 || Player2.Position == 25 || Player2.Position == 35 ) {
				int count = 0;
				if( propertymanager.Properties[5][0]  == 2 ) count++;
				if( propertymanager.Properties[15][0] == 2 ) count++;
				if( propertymanager.Properties[25][0] == 2 ) count++;
				if( propertymanager.Properties[35][0] == 2 ) count++;
				if( count == 1 ) count = 25;
				else if( count == 2 ) count = 50;
				else if( count == 3 ) count = 100;
				else if( count == 4 ) count = 200;
				if( propertymanager.Properties[5][0]  == 2 ) propertymanager.Properties[5][2] = count;
				if( propertymanager.Properties[15][0] == 2 ) propertymanager.Properties[15][2] = count;
				if( propertymanager.Properties[25][0] == 2 ) propertymanager.Properties[25][2] = count;
				if( propertymanager.Properties[35][0] == 2 ) propertymanager.Properties[35][2] = count;
			}
		}
		repaint();
	}
		
	//either the 'add' button was clicked or the 'a' button was typed
	public void Add() {
		final Frame fr = new Frame( "Add Houses" );
		final Choice choice = new Choice();
		for( int i=0;  i<40;  i++ ) {
			//check to see if all three of the properties are owned, if so, add it
			//to the list of possible house additions
			if(propertymanager.Properties[i][11] != -1 &&
			propertymanager.Properties[i][12] != -1 ) {
				if( turn && propertymanager.Properties[i][0] == 1 && 
				propertymanager.Properties[propertymanager.Properties[i][11]][0] == 1 &&
				(propertymanager.Properties[propertymanager.Properties[i][12]][0] == 1 ||
				propertymanager.Properties[i][12] == -1) && i!=12 && i!=28)
					choice.add( propertymanager.List[i] );
				else if( !turn && propertymanager.Properties[i][0] == 2 &&
				propertymanager.Properties[propertymanager.Properties[i][11]][0] == 2 &&
				(propertymanager.Properties[propertymanager.Properties[i][12]][0] == 2 ||
				propertymanager.Properties[i][12] == -1)&& i!=12 && i!=28)
					choice.add( propertymanager.List[i] );
			}
		}
		final TextField howMany = new TextField( "1", 1 );
		final Label l = new Label( "How Many:" );
		final Button done = new Button( "Done" );
		final Button go = new Button( "Add the House(s)" );
		fr.setLayout( new FlowLayout( FlowLayout.CENTER ) );
		fr.setBackground( Color.CYAN );
		fr.setLayout( new GridLayout( 2, 3) );
		fr.setSize( 400, 170 );
		fr.add( choice );
		fr.add( l, Label.CENTER );
		fr.add( howMany );
		fr.add( go );
		fr.add( done );
		fr.setVisible( true );
		done.addActionListener( new ActionListener() {
			public void actionPerformed( ActionEvent e ) {
				fr.setVisible( false );
			}
		});
		go.addActionListener( new ActionListener() {
			public void actionPerformed( ActionEvent e ) {
				int amt = Integer.parseInt( howMany.getText() );
				int selected = 0;
				for( int i=0;  i<40;  i++ )
					if( choice.getSelectedItem() == propertymanager.List[i] )
						selected = i;

				if( turn ) {
					//add the house(s) and take the money
					if( propertymanager.Properties[selected][11] != -1 &&
			   		 propertymanager.Properties[selected][12] != -1 )
						if( propertymanager.Properties[selected][1] < 5 &&
						propertymanager.Properties[propertymanager.Properties[selected][11]][0] == 1 &&
						(propertymanager.Properties[propertymanager.Properties[selected][12]][0] == 1 ||
						 propertymanager.Properties[selected][12] == -1) &&
						(selected != 12  || selected != 28)) {
							int count=0;
							while( count < amt && propertymanager.Properties[selected][1] < 5 &&
							Player1.Money>=propertymanager.Properties[selected][10]	) {
								propertymanager.Properties[selected][1]++;
								Player1.Money-=propertymanager.Properties[selected][10];
								count++;
							}
						}
				}
				else {//do same for player 2
					if( propertymanager.Properties[selected][11] != -1 &&
			  		propertymanager.Properties[selected][12] != -1 )
						if( propertymanager.Properties[selected][1] < 5 &&
						propertymanager.Properties[propertymanager.Properties[selected][11]][0] == 2 &&
						(propertymanager.Properties[propertymanager.Properties[selected][12]][0] == 2 ||
						 propertymanager.Properties[selected][12] == -1) &&
						(selected != 12  || selected != 28)) {
							int count=0;
							while( count < amt && propertymanager.Properties[selected][1] < 5 &&
							Player2.Money>=propertymanager.Properties[selected][10]	) {
								propertymanager.Properties[selected][1]++;
								Player2.Money-=propertymanager.Properties[selected][10];
								count++;
							}
						}
				}
				repaint();
			}
		});

	}
	//either the 'remove' button was clicked or the 'r' button was typed
	public void Rem() {
		final Choice choice = new Choice();
		fr.setBackground( Color.WHITE );
		fr.setSize( 400, 170 );
		//if the property is owned, add it to the list
		for( int i=0;  i<40;  i++ ) {
			if( turn && propertymanager.Properties[i][0] == 1 )
				choice.add( propertymanager.List[i] );
			else if( !turn && propertymanager.Properties[i][0] == 2 )
				choice.add( propertymanager.List[i] );
		}
		//if they don't have any money and they have no property to sell, they lose
		if( noMoney && choice.getItemCount() == 0 && !fr.isShowing() ) {
			if( turn )
				fr.add( new Label( "You Lose " + Player1.Name + "." ) );
			else
				fr.add( new Label( "You Lose " + Player2.Name + "." ) );
			fr.setVisible( true );
			fr.addWindowListener( new WindowAdapter() {
				public void windowClosing( WindowEvent e ) {
					fr.setVisible( false );
				}
			});
		}
		else {
			final TextField howMany = new TextField( "1", 1 );
			final Label l = new Label( "How Many:" );
			final Button done = new Button( "Done" );
			final Button go = new Button( "Remove the House(s)" );
			final Button sell = new Button("Sell the Property");
			fr.setLayout( new GridLayout( 2, 3) );
			fr.add( choice );
			fr.add( l, Label.CENTER );
			fr.add( howMany );
			fr.add( go );
			fr.add( sell );
			fr.add( done );
			fr.setVisible( true );
			done.addActionListener( new ActionListener() {
				public void actionPerformed( ActionEvent e ) {
					if( frame.isShowing() )
						frame.setVisible( false );
					fr.setVisible( false );
					fr.remove( choice );
					fr.remove( l );
					fr.remove( howMany );
					fr.remove( go );
					fr.remove( sell );
					fr.remove( done );
				}
			});
			sell.addActionListener( new ActionListener() {
				public void actionPerformed( ActionEvent e ) {
					//sell the houses and add the money to the persons .Money
					int selected = 0;
					for( int i=0;  i<40;  i++ )
						if( choice.getSelectedItem() == propertymanager.List[i] )
							selected = i;
					if( selected == 5 ) {
						if( turn ){
							Player1.Money+=100;
						}
						else {
							Player2.Money+=100;
						}
						propertymanager.Properties[selected][0] = 0;
					}
					else if( selected == 15 ) {
						if( turn ) {
							Player1.Money+=100;
						}
						else {
							Player2.Money+=100;
						}
						propertymanager.Properties[selected][0] = 0;
					}
					else if( selected == 25 ) {
						if( turn ) {
							Player1.Money+=100;
						}
						else {
							Player2.Money+=100;
						}
						propertymanager.Properties[selected][0] = 0;
					}
					else if( selected == 35 ) {
						if( turn ) {
							Player1.Money+=100;
						}
						else {
							Player2.Money+=100;
						}
						propertymanager.Properties[selected][0] = 0;
					}
					else if( selected == 12 || selected == 28 ) {
						if( turn ) {
							Player1.Money+=75;
						}
						else {
							Player2.Money+=75;
						}
					}

					else if( propertymanager.Properties[selected][1] == 0 || 
					    propertymanager.Properties[selected][1] == -1   ) {
						propertymanager.Properties[selected][0] = 0;
						if( turn ) {
							Player1.Money+=propertymanager.Properties[selected][10];
						}
						else {
							Player2.Money+=propertymanager.Properties[selected][10];

						}
					}
					choice.remove( propertymanager.List[selected] );
					repaint();
				}
			});
			go.addActionListener( new ActionListener() {
				public void actionPerformed( ActionEvent e ) {
					int amt = Integer.parseInt( howMany.getText() );
					int selected = 0;
					for( int i=0;  i<40;  i++ )
						if( choice.getSelectedItem() == propertymanager.List[i] )
							selected = i;

					if( turn ) {
						if( propertymanager.Properties[selected][1] > 0 ) {
							int count=0;
							//remove the house(s) and add the money
							while( count < amt && propertymanager.Properties[selected][1] > 0 ) {
								propertymanager.Properties[selected][1]--;
								Player1.Money+=propertymanager.Properties[selected][10];

								count++;
							}
						}
					}
					else {
						if( propertymanager.Properties[selected][1] > 0 ) {
							int count=0;
							while( count < amt && propertymanager.Properties[selected][1] > 0 ) {
								propertymanager.Properties[selected][1]--;
								Player2.Money+=propertymanager.Properties[selected][10];
 
								count++;
							}
						}
					}
					repaint();
				}
			});
		}
	}
	//start a new game
	public void New() {
		final Frame a = new Frame();
		final TextField tf1 = new TextField("Player1", 20 );
		final TextField tf2 = new TextField("Player2", 20 );
		final Button b = new Button( "Go to Board");
		a.setSize( 400, 110 );
		a.setBackground( Color.ORANGE );
		a.setLayout( new FlowLayout(FlowLayout.CENTER) );
		a.add( tf1);
		a.add( b );
		a.add( tf2 );
		a.setVisible( true );
		b.addActionListener( new ActionListener() {
			public void actionPerformed( ActionEvent e ) {
				Player1.Name = tf1.getText();
				Player2.Name = tf2.getText();
				a.setVisible( false );
				Player1.Position = 0;
				Player2.Position = 0;
				Player1.Money = 1500;
				Player2.Money = 1500;
				Player1.inPrison = false;
				Player2.inPrison = false;
				noMoney = false;
				turn = true;
				rolled = false;
				for( int i=0;  i<40;  i++ ) {
					if( propertymanager.Properties[i][0] != -1 )
						propertymanager.Properties[i][0] = 0;
					if( propertymanager.Properties[i][1] != -1 )
						propertymanager.Properties[i][1] = 0;
				}
				propertymanager.Properties[20][1] = 500;
				repaint();
			}
		});
		a.addWindowListener( new WindowAdapter() {
			public void windowClosing( WindowEvent e ) {
				a.setVisible( false );
				repaint();
			}
		});
		repaint();
	}
}

